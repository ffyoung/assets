<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager" />
        <property name="realm" ref="ShiroRealm" />
    </bean>

    <!--定义我们自己的Realm-->
    <bean id="ShiroRealm"  class="com.qianyuan.core.shiro.token.ShiroRealm"/>

    <!--Shiro的过滤器-->
    <bean id="ShiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 权限管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录地址 -->
        <property name="loginUrl" value="/user/login"/>
        <!-- 登录后跳转到业务页面 -->
        <property name="successUrl" value="/user/loginDo"/>
        <!-- 错误页面 -->
        <property name="unauthorizedUrl" value="/coon/error"/>
        <!-- 权限配置 -->
        <!--
           anon：代表未经认证可以访问的静态资源
           authc： 认证之后才可以访问静态资源
       -->
        <!--delegatingShiroFilter-->
        <!--
            通配符：
            ?: /admin? 匹配 admin1，但不匹配 /admina、/admin、/admin/
            *: 匹配0个或多个字符   例如：/admin1,/admin123,/admin3423213……
            **: 匹配0个或多个路径
        -->
        <!--
            身份验证相关：
                   authc: 基于表单的拦截器 如/** = authc，如果没有登录会跳到相应的登录页面
                          主要属性：
                            usernameParam:表单提交的用户参数名(username);
                            passwordParam:表单提交的密码参数名(password);
                            rememberMeParam:表单提交的密码参数名(rememberMe);
                            loginUrl:登录页面地址(/login.jsp)
                            successful:登录成功的默认重定向地址
                            failureKeyAtttibute:登录失败后错误信息存储key(shiroLoginFailure);
                   authcBasic : Basic HTTP身份验证拦截器，主要属性：applicationName:弹出登录框显示的信息(application)
                   logout:退出拦截器，主要属性：redirectUrl:退出成功后重定向的地址(/)；实例：“/logout = logout”
                   user: 用户拦截器，用户已经身份验证、记住我登录的都行，实例 /** = user
                   anon:匿名拦截器，即不需要登录即可访问：一般用于静态资源过滤；示例：/static/**=anon
                   roles:角色授权拦截器，验证用户是否拥有所有角色；
                           主要属性：loginURl：登录的页面地址(/login.jsp)
                                    unauthorizedUrl:未授权后重定向的地址;
                                    实例： /admin/** =roles[admin]
                   perms:权限授权拦截器，验证用户是否拥有所有权限，属性和roles一样，示例:/user/**=perms["user:create"]
                   port:端口拦截器，主要属性：port(80):可以通过的端口，示例：/test =port[80],如果用户访问该页面是非80，
                        将自动将请求改为80并重定向到该80端口，其他路径/参数一样
                   rest:rest风格拦截器，自动根据请求方法构建权限字符串
                           (GET = read,POST = create,PUT = update,HEAD = read,TRACE = read,OPTIONS = read,MKCOL = create)
                           示例：/user =rest[user]  会自动拼出："user:read,user:create,user:update,user:delete"
                                权限字符串进行权限匹配（所有都得匹配，isPermittedAll）
                   ssl:SSL拦截器，只有请求协议是https才能通过，否则自动跳转回https端口(443),其他和port拦截器一样
        -->
        <property name="filterChainDefinitions">
            <value>
                <!-- anon无权限访问请求，此处是登录页面和登录请求 -->
                /css/**=anon
                /js/**=anon
                /user/**=anon
                /coon/**=anon
                /img/**=anon
                <!-- 需要权限为add的用户才能访问此请求-->
                <!-- 需要管理员角色才能访问此页面 -->
                <!--拦截非静态资源的所有请求-->
                /**=authc
            </value>
        </property>
    </bean>

    <!--###新加bean-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
        <property name="arguments" ref="securityManager" />
    </bean>

    <!--MD5算法加密-->
    <!--<bean id="jdbcRealm" class="com.qianyuan.core.shiro.token.ShiroRealm">
        <property name="credentialsMatcher" >
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5" />
                <property name="hashIterations" value="1024" />
            </bean>
        </property>
    </bean>-->

    <!--缓存-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
    </bean>

    <!--Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!--启用Shiro注解-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />

    <!--网络方面-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>




    <!-- 会话Session ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie的name，我故意取名叫xxxxbaidu -->
        <constructor-arg value="v_v-s-baidu"/>
        <property name="httpOnly" value="true"/>
        <!--cookie的有效时间 -->
        <property name="maxAge" value="-1"/>
        <!-- 配置存储Session Cookie的domain为 一级域名
        <property name="domain" value=".itboy.net"/>
         -->
    </bean>

</beans>

